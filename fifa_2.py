# -*- coding: utf-8 -*-
"""Fifa-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ceyr_rTh7LrjrNsuoTXyo0kIIkbLxBP2
"""

!pip install eli5

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import eli5
from eli5.sklearn import PermutationImportance
from collections import Counter
import missingno as msno
from collections import defaultdict

import csv
import warnings
warnings.filterwarnings('ignore')
import plotly
sns.set_style('darkgrid')

from google.colab import drive
drive.mount('/content/drive')

cr= pd.read_csv('/content/drive/My Drive/Fifa 19/club_rank.csv', index_col = False)
df = pd.read_csv('/content/drive/My Drive/Fifa 19/clean-data-2.csv', index_col = False)

nation_rt = pd.read_csv('/content/drive/My Drive/Fifa 19/nation_rating.csv', index_col = False)
nation_rt = nation_rt.loc[nation_rt['rank_date'] == '2020-11-26']
nt = nation_rt[['country_full','total_points' ]].copy()
nt = nt.sort_values(by=['total_points'], ascending = False)
nt = nt.rename(columns={"country_full": "Nationality"})

un_n = (set(df['Nationality']))
mn= set(nt['Nationality'])
common = (mn).intersection(un_n)
print (len(common))
print(common)
und= un_n.difference(mn)
print(len(und), sorted(und))



nt["Nationality"].replace({"Antigua and Barbuda": "Antigua & Barbuda" , "Bosnia and Herzegovina" : "Bosnia Herzegovina","Cabo Verde":"Cape Verde","Central African Republic":"Central African Rep.","Curaçao":"Curacao","Congo DR":"DR Congo","North Macedonia":"FYR Macedonia","Guinea-Bissau":"Guinea Bissau","IR Iran":"Iran","Côte d'Ivoire":"Ivory Coast","St. Kitts and Nevis":"St Kitts Nevis", "St. Lucia": "St Lucia", "São Tomé and Príncipe":"São Tomé & Príncipe","Trinidad and Tobago":"Trinidad & Tobago", "USA": "United States"}, inplace=True)

nt = nt.rename(columns={"total_points": "nation_rating"})

nt.to_csv('/content/drive/My Drive/Fifa 19/nation.csv', index = False)

nt = pd.read_csv('/content/drive/My Drive/Fifa 19/nation.csv', index_col = False)

nt

avg_club = df.groupby('Club').Overall.mean().reset_index().sort_values(by='Overall', ascending=False)
avg_club = avg_club.rename(columns={"Overall": "Club_overall"})
(avg_club)

fdf = (pd.merge(df, avg_club, on='Club'))

fdf = (pd.merge(fdf, nt, on='Nationality'))

for index in fdf.index:
  if fdf.at[index, 'Club']=='Free Agent':
    fdf.at[index,'Club_overall'] = 0

fdf

sorted(set(fdf['Loaned From']))

for index in fdf.index:
  if fdf.at[index, 'Loaned From']=='None':
    fdf.at[index,'Loaned From'] = 0
  else:
    fdf.at[index,'Loaned From'] = 1

fdf[fdf['Loaned From']==0]

fdf['Loaned From']= fdf['Loaned From'].astype(int)

#fdf.drop(['Nationality', 'Club'], axis= 1,  inplace= True)

cat_cols = ['Preferred Foot', 'Loaned From']

pd.options.display.float_format = '{:.4f}'.format

tdf = fdf.copy()
tdf['Release Clause'].apply(float.is_integer).all()

"""Make data column type int if the column has only integer values"""

for col in tdf.select_dtypes(include='float').keys().tolist():
  print (col, ': ', len(set(tdf[col])))
  if tdf[col].apply(float.is_integer).all() == True:
    tdf[col] = tdf[col].astype(int)

# run the same code for 'Attack Work Rate' also
for index in tdf.index:
  if tdf.at[index, 'Defense Work Rate']!= -1:
    #print (index)
    tdf.at[index,'Defense Work Rate'] = tdf.at[index,'Defense Work Rate']  +1

for index in tdf.index:
  if tdf.at[index, 'Attack Work Rate']!= -1:
    #print (index)
    tdf.at[index,'Attack Work Rate'] = tdf.at[index,'Attack Work Rate']  +1

tdf.to_csv('/content/drive/My Drive/Fifa 19/common_data.csv', index = False)

tdf = pd.read_csv('/content/drive/My Drive/Fifa 19/common_data.csv', index_col = False)

!pip install git+https://github.com/MaxHalford/xam --upgrade
import xam

jd = tdf['Position'].value_counts(ascending=True).to_dict()
plt.rcParams['figure.figsize'] = [30, 10]
plt.bar(*zip(*jd.items()))
plt.show()

encoder = xam.feature_extraction.BayesianTargetEncoder(columns=['Position'],  prior_weight=200,suffix='')
encoder.fit_transform(fdf, fdf['Value'])
fdf['Position']

jd = tdf['Jersey Number'].value_counts(ascending=True).to_dict()
plt.bar(*zip(*jd.items()))
plt.show()

encoder = xam.feature_extraction.BayesianTargetEncoder(columns=['Jersey Number'],  prior_weight=150,suffix='')
encoder.fit_transform(tdf, tdf['Value'])
#tdf['Joined']

cols = ['Contract Valid Until', 'Joined']
for col in cols:
  mn = sorted(set (tdf[col]))[1]
  for index in tdf.index:
    
    if tdf.at[index, col]!= -1:
      #print (index)
      tdf.at[index,col] = tdf.at[index,col]  - mn + 1
    else:
      tdf.at[index,col] = 0

tdf

jd = tdf['Contract Valid Until'].value_counts(ascending=True).to_dict()
plt.bar(*zip(*jd.items()))
plt.show()

encoder = xam.feature_extraction.BayesianTargetEncoder(columns=['Contract Valid Until'],  prior_weight=200,suffix='')
encoder.fit_transform(fdf, fdf['Value'])
fdf['Contract Valid Until']

jd = tdf['Joined'].value_counts(ascending=True).to_dict()
plt.bar(*zip(*jd.items()))
plt.show()

encoder = xam.feature_extraction.BayesianTargetEncoder(columns=['Joined'],  prior_weight=1000,suffix='')
encoder.fit_transform(fdf, fdf['Value'])
fdf['Joined']

tdf = tdf.sample(frac=1).reset_index(drop=True)

tdf

tdf.to_csv('/content/drive/My Drive/Fifa 19/final_data_rec.csv', index = False)

tdf.drop(['Nationality', 'Club'], axis= 1,  inplace= True)